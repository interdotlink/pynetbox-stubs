from typing import (
    TYPE_CHECKING,
    Any,
    Dict,
    Iterator,
    List,
    Optional,
    Self,
    Tuple,
    TypeVar,
)

from pynetbox.core.endpoint import Endpoint
from pynetbox.core.query import Request
from pynetbox.core.util import Hashabledict as Hashabledict

if TYPE_CHECKING:
    from pynetbox.core.api import Api
    from pynetbox.core.app import App

LIST_AS_SET: Tuple[Any]

def get_return(lookup, return_fields: Optional[List]) -> str: ...
def flatten_custom(custom_dict: Dict) -> Dict: ...

class JsonField: ...

R = TypeVar("R", bound="Record")

class RecordSet(Iterator[R]):
    def __init__(self, endpoint: "App", request: Request, **kwargs):
        self.endpoint = endpoint
        self.request = request
        self.response: Iterator = ...
        self._response_cache: List

    def __iter__(self) -> RecordSet[R]: ...
    def __next__(self) -> R: ...
    def __len__(self) -> int: ...
    def update(self, **kwargs) -> Optional[Record]: ...
    def delete(self) -> bool: ...

class Record(object):
    url: str | None
    def __init__(self, values: Dict, api: "Api", endpoint: Endpoint):
        self.has_details: bool = False
        self.api = api
        self.default_ret = Record
        self.endpoint: Endpoint
        self.url: Optional[str]

    def __iter__(self) -> Iterator[Tuple[str, Any]]: ...
    def __getitem__(self, k: str) -> Any: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __hash__(self) -> str: ...
    def __eq__(self, other: Self) -> bool: ...
    def full_details(self) -> bool: ...
    def serialize(self, nested: bool = False, init: bool = False) -> dict: ...
    def updates(self) -> dict: ...
    def save(self) -> bool: ...
    def update(self, data: dict) -> bool: ...
    def delete(self) -> bool: ...
